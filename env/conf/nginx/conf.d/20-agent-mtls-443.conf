server {
  listen 8443 ssl;
  http2 on;
  server_name _;

  # Production TLS settings
  ssl_certificate     /etc/nginx/certs/server.crt;
  ssl_certificate_key /etc/nginx/certs/server.key;
  
  # Enforce mTLS for production (verify at application level for flexibility)
  ssl_client_certificate /etc/nginx/certs/root_ca.crt;
  ssl_verify_client optional;  # Allow bootstrap, verify in locations as needed
  ssl_verify_depth 2;
  
  # Strong TLS settings
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
  ssl_prefer_server_ciphers on;
  # Note: ssl_session_cache shared:SSL is defined globally in nginx.conf
  ssl_session_timeout 10m;
  
  # Security headers
  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
  add_header X-Content-Type-Options "nosniff" always;
  add_header X-Frame-Options "DENY" always;

  proxy_read_timeout 30s;

  # Enrollment endpoint - allow without mTLS for initial certificate enrollment
  location = /api/enroll {
    # Note: This location inherits ssl_verify_client optional from server level
    # Rate limiting for enrollment endpoint (security)
    limit_req zone=bootstrap_rate burst=5 nodelay;
    
    proxy_set_header Host              $host;
    proxy_set_header X-Real-IP         $remote_addr;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_http_version 1.1;
    proxy_set_header Connection "";

    proxy_pass http://enroll_gateway/enroll;
  }

  # Bootstrap endpoint - allow without mTLS for initial certificate enrollment  
  location = /agent/bootstrap/ott {
    # Note: This location inherits ssl_verify_client optional from server level
    # Rate limiting for bootstrap endpoint (security)
    limit_req zone=bootstrap_rate burst=5 nodelay;
    
    proxy_set_header Host              $host;
    proxy_set_header X-Real-IP         $remote_addr;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_http_version 1.1;
    proxy_set_header Connection "";

    proxy_pass http://api_agent/bootstrap/ott;
  }

  # Agent API endpoints - REQUIRE mTLS (removed test bypass)
  location ^~ /agent/policies {
    # Verify mTLS certificate
    if ($ssl_client_verify != "SUCCESS") {
      return 401;
    }

    proxy_set_header Host              $host;
    proxy_set_header X-Real-IP         $remote_addr;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Client-Subject  $ssl_client_s_dn;
    proxy_set_header X-Client-Verify   $ssl_client_verify;
    proxy_http_version 1.1;
    proxy_set_header Connection "";

    # Strip /agent prefix and forward to api-agent
    rewrite ^/agent/(.*)$ /$1 break;
    proxy_pass http://api_agent;
  }

  location ^~ /agent/results {
    # Verify mTLS certificate
    if ($ssl_client_verify != "SUCCESS") {
      return 401;
    }

    proxy_set_header Host              $host;
    proxy_set_header X-Real-IP         $remote_addr;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Client-Subject  $ssl_client_s_dn;
    proxy_set_header X-Client-Verify   $ssl_client_verify;
    proxy_http_version 1.1;
    proxy_set_header Connection "";

    # Strip /agent prefix and forward to api-agent
    rewrite ^/agent/(.*)$ /$1 break;
    proxy_pass http://api_agent;
  }

  # All endpoints forward to api-agent with mTLS certificate information
  location / {
    # Rate limiting for API endpoints
    limit_req zone=api_rate burst=10 nodelay;
    
    proxy_set_header Host              $host;
    proxy_set_header X-Real-IP         $remote_addr;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    
    # Pass client certificate information for mTLS authentication
    proxy_set_header X-Client-Cert     $ssl_client_escaped_cert;
    proxy_set_header X-Client-Verify   $ssl_client_verify;
    proxy_set_header X-Client-Subject  $ssl_client_s_dn;
    proxy_set_header X-Client-Issuer   $ssl_client_i_dn;
    proxy_set_header X-Client-Serial   $ssl_client_serial;
    proxy_set_header X-Client-Fingerprint $ssl_client_fingerprint;
    
    proxy_http_version 1.1;
    proxy_set_header Connection "";

    proxy_pass http://api_agent/;
  }

  location /step-ca/ {
      # Strip prefix so /step-ca/1.0/sign -> /1.0/sign
      rewrite ^/step-ca/(.*)$ /$1 break;

      proxy_set_header Host              $host;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_http_version 1.1;
      proxy_set_header Connection "";
      proxy_read_timeout 300s;

      # TLS upstream - disable verification for now
      proxy_ssl_server_name on;
      proxy_ssl_name stepca;
      proxy_ssl_verify off;

      proxy_pass https://stepca_upstream;
  }
}