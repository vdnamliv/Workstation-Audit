version: "3.9"

services:
  postgres:
    image: postgres:16-alpine
    container_name: vt-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    command: ["postgres", "-c", "wal_level=logical"]
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./conf/postgres/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 10
    restart: unless-stopped
    networks: [backend]

  stepca:
    image: smallstep/step-ca:0.26.2
    container_name: vt-stepca
    environment:
      DOCKER_STEPCA_INIT_NAME: ${STEPCA_NAME}
      DOCKER_STEPCA_INIT_DNS_NAMES: ${STEPCA_DNS_NAMES}
      DOCKER_STEPCA_INIT_PROVISIONER_NAME: ${STEPCA_PROVISIONER}
      DOCKER_STEPCA_INIT_PASSWORD: ${STEPCA_PASSWORD}
      DOCKER_STEPCA_INIT_REMOTE_MANAGEMENT: "true"
    # Quy hoạch volumes:
    # - ./step -> /home/step (toàn bộ data CA)
    # - ./secrets -> /home/step/secrets (provisioner.pass / provisioner.key)
    # - ./certs/stepca -> /home/step/certs (root_ca.crt, intermediate.crt,…)
    # - ./certs/nginx -> /out/nginx (điểm rơi cert/key cho Nginx)
    volumes:
      - ./step:/home/step
      - ./secrets:/home/step/secrets
      - ./certs/stepca:/home/step/certs
      - ./certs/nginx:/out/nginx
    expose:
      - "9000"
    healthcheck:
      test: ["CMD", "curl", "-k", "https://localhost:9000/health"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    networks: [backend]

  keycloak:
    image: quay.io/keycloak/keycloak:25.0
    container_name: vt-keycloak
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/${KEYCLOAK_DB}
      KC_DB_USERNAME: ${KEYCLOAK_DB_USER}
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KEYCLOAK_ADMIN}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_PROXY_HEADERS: xforwarded
      KC_HEALTH_ENABLED: "true"
      KC_METRICS_ENABLED: "true"
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
    volumes:
      - ./conf/keycloak:/opt/keycloak/data/import:ro
    command: ["start-dev", "--http-enabled=true", "--http-port=8080", "--import-realm"]
    healthcheck:
      test: ["CMD-SHELL", "bash -c 'exec 3<>/dev/tcp/127.0.0.1/8080'"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 40s
    expose:
      - "8080"
    restart: unless-stopped
    networks: [backend]

  api-backend:
    build:
      context: ..
      dockerfile: env/docker/Dockerfile.vt-server
    container_name: vt-api-backend
    command:
      - "--mode=dashboard"
      - "--dashboard-addr=:8081"
      - "--rules=/app/rules"
      - "--pg_dsn=${POSTGRES_DSN}"
      - "--oidc-issuer=${OIDC_ISSUER}"
      - "--oidc-client-id=${OIDC_CLIENT_ID}"
      - "--oidc-admin-role=${OIDC_ADMIN_ROLE}"
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    restart: unless-stopped
    networks: [backend]

  ui:
    build:
      context: ../server/ui
    container_name: vt-ui
    expose:
      - "80"
    restart: unless-stopped
    networks: [backend]

  oidc-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.6.0
    container_name: vt-oidc-proxy
    depends_on:
      api-backend:
        condition: service_started
      keycloak:
        condition: service_healthy
    environment:
      OAUTH2_PROXY_PROVIDER: keycloak-oidc
      OAUTH2_PROXY_SKIP_PROVIDER_BUTTON: "true"
      OAUTH2_PROXY_OIDC_ISSUER_URL: ${OIDC_ISSUER}
      OAUTH2_PROXY_CLIENT_ID: ${OIDC_CLIENT_ID}
      OAUTH2_PROXY_CLIENT_SECRET: ${OIDC_CLIENT_SECRET}
      OAUTH2_PROXY_COOKIE_SECRET: ${OIDC_COOKIE_SECRET}
    volumes:
      - ./conf/oidc/oauth2-proxy.cfg:/etc/oauth2-proxy.cfg:ro
    command: ["--config=/etc/oauth2-proxy.cfg"]
    expose:
      - "4180"
    restart: unless-stopped
    networks: [backend]

  nginx:
    image: nginx:1.27
    container_name: vt-nginx
    depends_on:
      - oidc-proxy
      - api-backend
      - keycloak
      - stepca
      - ui
    ports:
      - "8443:8443"   # Admin/UI HTTPS
      - "443:443"     # Agent mTLS
    volumes:
      - ./conf/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./conf/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certs/nginx:/etc/nginx/certs:ro        # server.crt/server.key do Step-CA cấp cho gateway.local
      - ./certs/stepca:/etc/nginx/ca:ro          # chain CA để verify client cert (mTLS)
    restart: unless-stopped
    networks: [backend]

  enroll-gateway:
    build:
      context: ..
      dockerfile: env/docker/Dockerfile.enroll-gateway
    container_name: vt-enroll-gateway
    command:
      - "--listen=:8082"
      - "--stepca-url=https://vt-stepca:9000"
      - "--provisioner=${STEPCA_PROVISIONER}"
      - "--password-file=/secrets/provisioner.pass"
    volumes:
      - ./secrets:/secrets:ro
    depends_on:
      stepca:
        condition: service_healthy
    expose:
      - "8082"
    restart: unless-stopped
    networks: [backend]

volumes:
  db_data:

networks:
  backend:
