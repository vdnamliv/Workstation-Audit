services:
  postgres:
    image: postgres:16-alpine
    container_name: vt-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    command: ["postgres", "-c", "wal_level=logical"]
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./conf/postgres/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 10
    restart: unless-stopped
    networks: [backend]

  stepca:
    image: smallstep/step-ca:0.27.4
    container_name: vt-stepca
    environment:
      DOCKER_STEPCA_INIT_NAME: "VT-Audit-CA"
      DOCKER_STEPCA_INIT_DNS_NAMES: "stepca,localhost,gateway.local,agent-gateway.local"
      DOCKER_STEPCA_INIT_PROVISIONER_NAME: "bootstrap@vt-audit"
      DOCKER_STEPCA_INIT_PASSWORD: "ChangeMe123!"
      DOCKER_STEPCA_INIT_REMOTE_MANAGEMENT: "true"
    volumes:
      - stepca_data:/home/step
      - ./certs/nginx:/home/step/nginx-certs
    expose:
      - "9000"
    healthcheck:
      test: ["CMD-SHELL", "step ca health --ca-url https://localhost:9000 --root /home/step/certs/root_ca.crt || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 20
      start_period: 45s
    restart: unless-stopped
    networks: 
      backend:
        aliases:
          - stepca
          - agent-gateway.local

  nginx-certs:
    image: alpine:latest
    container_name: vt-nginx-certs
    volumes:
      - ./certs/nginx:/certs
    command: sh -c "
      if [ ! -f /certs/server.crt ]; then
        apk add --no-cache openssl;
        openssl req -x509 -newkey rsa:2048 -keyout /certs/server.key -out /certs/server.crt -days 365 -nodes -subj '/CN=gateway.local' -addext 'subjectAltName=DNS:gateway.local,DNS:localhost,DNS:stepca,DNS:agent-gateway.local';
        cp /certs/server.crt /certs/root_ca.crt;
        cp /certs/server.crt /certs/stepca-chain.crt;
        chmod 644 /certs/*.crt /certs/*.key;
        echo 'Certificates created successfully';
        ls -la /certs/;
      fi"
    restart: "no"

  keycloak:
    image: quay.io/keycloak/keycloak:25.0
    container_name: vt-keycloak
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/${KEYCLOAK_DB}
      KC_DB_USERNAME: ${KEYCLOAK_DB_USER}
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KEYCLOAK_ADMIN}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_PROXY_HEADERS: xforwarded
      KC_HEALTH_ENABLED: "true"
      KC_METRICS_ENABLED: "true"
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
    volumes:
      - ./conf/keycloak:/opt/keycloak/data/import:ro
    command: [
      "start-dev",
      "--http-enabled=true",
      "--http-port=8080",
      "--import-realm",
      "--hostname=keycloak",
     # "--hostname=gateway.local",
      "--hostname-strict=false"
    ]
    healthcheck:
      test: ["CMD-SHELL", "bash -c 'exec 3<>/dev/tcp/127.0.0.1/8080'"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 40s
    expose:
      - "8080"
    restart: unless-stopped
    networks: [backend]

  api-backend:
    build:
      context: ..
      dockerfile: env/docker/Dockerfile.vt-server
    container_name: vt-api-backend
    command:
      - "--mode=dashboard"
      - "--dashboard-addr=:8081"
      - "--rules=/app/rules"
      - "--pg_dsn=${POSTGRES_DSN}"
      - "--oidc-issuer=${OIDC_ISSUER}"
      - "--oidc-client-id=${OIDC_CLIENT_ID}"
      - "--oidc-client-secret=${OIDC_CLIENT_SECRET}"
      - "--oidc-admin-role=${OIDC_ADMIN_ROLE}"
      - "--stepca-url=https://stepca:9000"
      - "--stepca-external-url=https://gateway.local:8443/step-ca"
      - "--stepca-provisioner=${STEPCA_PROVISIONER}"
      - "--stepca-key-path=/home/step/secrets/bootstrap@vt-audit_key_plain"  
      - "--stepca-password="
    volumes:
      - stepca_data:/home/step:ro
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    expose:
      - "8081"
    restart: unless-stopped
    networks: [backend]

  api-agent:
    build:
      context: ..
      dockerfile: env/docker/Dockerfile.vt-server
    container_name: vt-api-agent
    command:
      - "--mode=agent"
      - "--agent-addr=:8080"
      - "--rules=/app/rules"
      - "--pg_dsn=${POSTGRES_DSN}"
      - "--stepca-url=https://stepca:9000"
      - "--stepca-external-url=https://gateway.local:8443/step-ca"
      - "--stepca-provisioner=${STEPCA_PROVISIONER}"
      - "--stepca-key-path=/home/step/secrets/ca.json"
      - "--stepca-password=${STEPCA_PROVISIONER_PASSWORD}"
      - "--bootstrap-token=${AGENT_BOOTSTRAP_TOKEN}"
    volumes:
      - stepca_data:/home/step:ro
    depends_on:
      postgres:
        condition: service_healthy
      stepca:
        condition: service_healthy
    expose:
      - "8080"
    restart: unless-stopped
    networks: 
      - backend

  oidc-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.6.0
    container_name: vt-oidc-proxy
    depends_on:
      api-backend:
        condition: service_started
      keycloak:
        condition: service_healthy
    environment:
      OAUTH2_PROXY_OIDC_ISSUER_URL: "http://keycloak:8080/realms/vt-audit"
      OAUTH2_PROXY_CLIENT_ID: ${OIDC_CLIENT_ID}
      OAUTH2_PROXY_CLIENT_SECRET: ${OIDC_CLIENT_SECRET}
      OAUTH2_PROXY_COOKIE_SECRET: ${OIDC_COOKIE_SECRET}
    volumes:
      - ./conf/oidc/oauth2-proxy.cfg:/etc/oauth2-proxy.cfg:ro
    command: [
      "--config=/etc/oauth2-proxy.cfg",
      "--upstream=http://api-backend:8081"
    ]
    expose:
      - "4180"
    restart: unless-stopped
    networks: [backend]

  nginx:
    image: nginx:1.27
    container_name: vt-nginx
    depends_on:
      nginx-certs:
        condition: service_completed_successfully
      oidc-proxy:
        condition: service_started
      api-backend:
        condition: service_started
      keycloak:
        condition: service_healthy
      enroll-gateway:
        condition: service_started
    ports:
      - "8443:8443"   # Agent mTLS + bootstrap
      - "443:443"     # Admin/UI HTTPS
    volumes:
      - ./conf/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./conf/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./conf/nginx/html:/etc/nginx/html:ro
      - ./certs/nginx:/etc/nginx/certs:ro
    restart: unless-stopped
    networks: 
      backend:
        aliases:
          - gateway.local

  enroll-gateway:
    build:
      context: ..
      dockerfile: env/docker/Dockerfile.vt-server   
    container_name: vt-enroll-gateway
    command:
      - "--mode=agent"
      - "--agent-addr=:8082"
      - "--pg_dsn=${POSTGRES_DSN}"
      - "--stepca-url=https://stepca:9000"
      - "--stepca-external-url=https://gateway.local:8443/step-ca"
      - "--stepca-provisioner=${STEPCA_PROVISIONER}"
      - "--stepca-key-path=/home/step/secrets/ca.json"
      - "--stepca-password=${STEPCA_PROVISIONER_PASSWORD}"
      - "--bootstrap-token=${AGENT_BOOTSTRAP_TOKEN}"
    volumes:
      - stepca_data:/home/step:ro
    depends_on:
      postgres:
        condition: service_healthy
      stepca:
        condition: service_healthy
    expose:
      - "8082"
    restart: unless-stopped
    networks: [backend]

volumes:
  db_data:
  stepca_data:

networks:
  backend: